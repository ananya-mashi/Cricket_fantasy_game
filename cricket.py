# -*- coding: utf-8 -*-# Form implementation generated from reading ui file 'cricket.ui'## Created by: PyQt5 UI code generator 5.11.3## WARNING! All changes made in this file will be lost!from PyQt5 import QtCore, QtGui, QtWidgets, uicimport sqlite3class Ui_MainWindow(object):        def setupUi(self, MainWindow):        MainWindow.setObjectName("MainWindow")        MainWindow.resize(828, 528)        MainWindow.setStyleSheet("background-color: rgb(171, 255, 184);")        self.centralwidget = QtWidgets.QWidget(MainWindow)        self.centralwidget.setObjectName("centralwidget")        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)        self.verticalLayout_4.setObjectName("verticalLayout_4")        self.verticalLayout_3 = QtWidgets.QVBoxLayout()        self.verticalLayout_3.setObjectName("verticalLayout_3")        self.label_8 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setPointSize(10)        font.setBold(True)        font.setWeight(75)        self.label_8.setFont(font)        self.label_8.setObjectName("label_8")        self.verticalLayout_3.addWidget(self.label_8)        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()        self.horizontalLayout_5.setObjectName("horizontalLayout_5")        self.label_7 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.label_7.setFont(font)        self.label_7.setStyleSheet("background-color: rgb(208, 244, 255);")        self.label_7.setObjectName("label_7")        self.horizontalLayout_5.addWidget(self.label_7)        self.t1 = QtWidgets.QLineEdit(self.centralwidget)        self.t1.setStyleSheet("border-color: rgb(170, 0, 0);")        self.t1.setObjectName("t1")        self.horizontalLayout_5.addWidget(self.t1)        self.label_6 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.label_6.setFont(font)        self.label_6.setStyleSheet("background-color: rgb(199, 255, 234);")        self.label_6.setObjectName("label_6")        self.horizontalLayout_5.addWidget(self.label_6)        self.t2 = QtWidgets.QLineEdit(self.centralwidget)        self.t2.setObjectName("t2")        self.horizontalLayout_5.addWidget(self.t2)        self.kj = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.kj.setFont(font)        self.kj.setStyleSheet("background-color: rgb(196, 255, 252);")        self.kj.setObjectName("kj")        self.horizontalLayout_5.addWidget(self.kj)        self.t3 = QtWidgets.QLineEdit(self.centralwidget)        self.t3.setObjectName("t3")        self.horizontalLayout_5.addWidget(self.t3)        self.label_4 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.label_4.setFont(font)        self.label_4.setStyleSheet("background-color: rgb(208, 252, 255);")        self.label_4.setObjectName("label_4")        self.horizontalLayout_5.addWidget(self.label_4)        self.t4 = QtWidgets.QLineEdit(self.centralwidget)        self.t4.setObjectName("t4")        self.horizontalLayout_5.addWidget(self.t4)        self.verticalLayout_3.addLayout(self.horizontalLayout_5)        self.verticalLayout_4.addLayout(self.verticalLayout_3)        self.label_5 = QtWidgets.QLabel(self.centralwidget)        self.label_5.setText("")        self.label_5.setTextFormat(QtCore.Qt.RichText)        self.label_5.setObjectName("label_5")        self.verticalLayout_4.addWidget(self.label_5)        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()        self.horizontalLayout_6.setObjectName("horizontalLayout_6")        self.verticalLayout = QtWidgets.QVBoxLayout()        self.verticalLayout.setObjectName("verticalLayout")        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()        self.horizontalLayout_3.setObjectName("horizontalLayout_3")        self.label = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(10)        font.setBold(True)        font.setItalic(True)        font.setWeight(75)        self.label.setFont(font)        self.label.setStyleSheet("background-color: rgb(223, 255, 219);")        self.label.setObjectName("label")        self.horizontalLayout_3.addWidget(self.label)        self.t5 = QtWidgets.QLineEdit(self.centralwidget)        self.t5.setObjectName("t5")        self.horizontalLayout_3.addWidget(self.t5)        self.verticalLayout.addLayout(self.horizontalLayout_3)        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()        self.horizontalLayout_2.setObjectName("horizontalLayout_2")        self.b1 = QtWidgets.QRadioButton(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.b1.setFont(font)        self.b1.setObjectName("b1")        self.horizontalLayout_2.addWidget(self.b1)        self.b2 = QtWidgets.QRadioButton(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.b2.setFont(font)        self.b2.setObjectName("b2")        self.horizontalLayout_2.addWidget(self.b2)        self.b3 = QtWidgets.QRadioButton(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.b3.setFont(font)        self.b3.setObjectName("b3")        self.horizontalLayout_2.addWidget(self.b3)        self.b4 = QtWidgets.QRadioButton(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(12)        font.setBold(True)        font.setWeight(75)        self.b4.setFont(font)        self.b4.setObjectName("b4")        self.horizontalLayout_2.addWidget(self.b4)        self.verticalLayout.addLayout(self.horizontalLayout_2)        self.listWidget = QtWidgets.QListWidget(self.centralwidget)        self.listWidget.setStyleSheet("background-color: rgb(225, 255, 229);")        self.listWidget.setObjectName("listWidget")        self.verticalLayout.addWidget(self.listWidget)        self.horizontalLayout_6.addLayout(self.verticalLayout)        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)        self.horizontalLayout_6.addItem(spacerItem)        self.verticalLayout_2 = QtWidgets.QVBoxLayout()        self.verticalLayout_2.setObjectName("verticalLayout_2")        self.horizontalLayout = QtWidgets.QHBoxLayout()        self.horizontalLayout.setObjectName("horizontalLayout")        self.label_3 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(10)        font.setBold(True)        font.setItalic(True)        font.setWeight(75)        self.label_3.setFont(font)        self.label_3.setStyleSheet("background-color: rgb(225, 255, 230);")        self.label_3.setObjectName("label_3")        self.horizontalLayout.addWidget(self.label_3)        self.t6 = QtWidgets.QLineEdit(self.centralwidget)        self.t6.setObjectName("t6")        self.horizontalLayout.addWidget(self.t6)        self.verticalLayout_2.addLayout(self.horizontalLayout)        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()        self.horizontalLayout_4.setObjectName("horizontalLayout_4")        self.label_2 = QtWidgets.QLabel(self.centralwidget)        font = QtGui.QFont()        font.setFamily("MS Sans Serif")        font.setPointSize(19)        font.setBold(True)        font.setWeight(75)        self.label_2.setFont(font)        self.label_2.setStyleSheet("background-color: rgb(199, 250, 255);")        self.label_2.setObjectName("label_2")        self.horizontalLayout_4.addWidget(self.label_2)        self.t7 = QtWidgets.QLineEdit(self.centralwidget)        self.t7.setObjectName("t7")        self.horizontalLayout_4.addWidget(self.t7)        self.verticalLayout_2.addLayout(self.horizontalLayout_4)        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)        self.listWidget_2.setStyleSheet("background-color: rgb(244, 230, 255);")        self.listWidget_2.setObjectName("listWidget_2")        self.verticalLayout_2.addWidget(self.listWidget_2)        self.horizontalLayout_6.addLayout(self.verticalLayout_2)        self.verticalLayout_4.addLayout(self.horizontalLayout_6)        self.t7.raise_()        self.listWidget_2.raise_()        self.listWidget_2.raise_()        self.listWidget.raise_()        self.label_5.raise_()        MainWindow.setCentralWidget(self.centralwidget)        self.menubar = QtWidgets.QMenuBar(MainWindow)        self.menubar.setGeometry(QtCore.QRect(0, 0, 828, 21))        self.menubar.setObjectName("menubar")        self.menuMkggfjhfk = QtWidgets.QMenu(self.menubar)        self.menuMkggfjhfk.setObjectName("menuMkggfjhfk")        MainWindow.setMenuBar(self.menubar)        self.statusbar = QtWidgets.QStatusBar(MainWindow)        self.statusbar.setObjectName("statusbar")        MainWindow.setStatusBar(self.statusbar)        self.actionNew_Team = QtWidgets.QAction(MainWindow)        self.actionNew_Team.setObjectName("actionNew_Team")        self.actionOpen_Team = QtWidgets.QAction(MainWindow)        self.actionOpen_Team.setObjectName("actionOpen_Team")        self.actionEdit_Team = QtWidgets.QAction(MainWindow)        self.actionEdit_Team.setObjectName("actionEdit_Team")        self.actionSave_Team = QtWidgets.QAction(MainWindow)        self.actionSave_Team.setObjectName("actionSave_Team")        self.actionExit = QtWidgets.QAction(MainWindow)        self.actionExit.setObjectName("actionExit")        self.actionExit_2 = QtWidgets.QAction(MainWindow)        self.actionExit_2.setObjectName("actionExit_2")        self.menuMkggfjhfk.addSeparator()        self.menuMkggfjhfk.addAction(self.actionNew_Team)        self.menuMkggfjhfk.addAction(self.actionOpen_Team)        self.menuMkggfjhfk.addAction(self.actionEdit_Team)        self.menuMkggfjhfk.addAction(self.actionSave_Team)        self.menuMkggfjhfk.addAction(self.actionExit)        self.menuMkggfjhfk.addAction(self.actionExit_2)        self.menubar.addAction(self.menuMkggfjhfk.menuAction())        self.menubar.triggered[QtWidgets.QAction].connect(self.menu)        self.b1.toggled.connect(self.button)        self.b2.toggled.connect(self.button)        self.b3.toggled.connect(self.button)        self.b4.toggled.connect(self.button)        self.listWidget.itemDoubleClicked.connect(self.removelist1)        self.listWidget_2.itemDoubleClicked.connect(self.removelist2)        self.bat=0        self.bwl=0        self.ar=0        self.wk=0        self.avl=1500        self.used=0        self.retranslateUi(MainWindow)        QtCore.QMetaObject.connectSlotsByName(MainWindow)            def retranslateUi(self, MainWindow):        _translate = QtCore.QCoreApplication.translate        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))        self.label_8.setText(_translate("MainWindow", "Your Selections"))        self.label_7.setText(_translate("MainWindow", "Batsmen  (BAT)"))        self.label_6.setText(_translate("MainWindow", "Bowler  (BOW)"))        self.kj.setText(_translate("MainWindow", "Allrounders  (AR)"))        self.label_4.setText(_translate("MainWindow", "Wicket-Keeper  (WK)"))        self.label.setText(_translate("MainWindow", "Points Availablel"))        self.b1.setText(_translate("MainWindow", "BAT"))        self.b2.setText(_translate("MainWindow", "BOW"))        self.b3.setText(_translate("MainWindow", "AR"))        self.b4.setText(_translate("MainWindow", "WK"))        self.label_3.setText(_translate("MainWindow", "Points Used"))        self.label_2.setText(_translate("MainWindow", "Team Name"))        self.menuMkggfjhfk.setTitle(_translate("MainWindow", "Manage Teams*"))        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))        self.actionOpen_Team.setText(_translate("MainWindow", "Open Team"))        self.actionEdit_Team.setText(_translate("MainWindow", "Edit Team"))        self.actionSave_Team.setText(_translate("MainWindow", "Save Team"))        self.actionExit.setText(_translate("MainWindow", "Evaluate Team"))        self.actionExit_2.setText(_translate("MainWindow", "Exit"))    def show(self):        self.t1.setText(str(self.bat))        self.t2.setText(str(self.bwl))        self.t4.setText(str(self.wk))        self.t3.setText(str(self.ar))        self.t5.setText(str(self.avl))        self.t6.setText(str(self.used))            def menu(self,action):        t=(action.text())        if t=='New Team':            self.bat=0            self.bwl=0            self.ar=0            self.wk=0            self.avl=1500            self.used=0            self.listWidget.clear()            self.listWidget_2.clear()            text, ok=QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:")            if ok:                self.t7.setText("{}".format(text))            self.show()                                if t=='Open Team':            self.bat=0            self.bwl=0            self.ar=0            self.wk=0            self.avl=1500            self.used=0            import sqlite3            con=sqlite3.connect('cricket.db')            cur=con.cursor()            self.listWidget.clear()            self.listWidget_2.clear()            text, ok=QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:")            if ok:                self.t7.setText("{}".format(text))                s="SELECT players,value from teams WHERE name=='"+text+"';"                cur=con.execute(s)                row=cur.fetchone()                player=row[0].split(',')                self.listWidget_2.addItems(player)                                self.used=row[1]                self.avl=1500-int(row[1])                                for i in range(self.listWidget_2.count()):                                        ply=self.listWidget_2.item(i).text()                                        sql="SELECT ctg from stats WHERE player=='"+ply+"';"                    cur=con.execute(sql)                    row=cur.fetchall()                    for r in row:                        ctgr=r[0]                        if ctgr=="BAT":                            self.bat+=1                                                if ctgr=="BWL":                            self.bwl+=1                                                if ctgr=="AR":                            self.ar+=1                                                if ctgr=="WK":                            self.wk+=1                    self.show()                        if t=='Edit Team':            self.bat=0            self.bwl=0            self.ar=0            self.wk=0            self.avl=1500            self.used=0            import sqlite3            con=sqlite3.connect('cricket.db')            cur=con.cursor()            self.listWidget.clear()            self.listWidget_2.clear()            text, ok=QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:")            if ok:                self.t7.setText("{}".format(text))                s="SELECT players,value from teams WHERE name=='"+text+"';"                cur=con.execute(s)                row=cur.fetchone()                player=row[0].split(',')                self.listWidget_2.addItems(player)                                self.used=row[1]                self.avl=1500-int(row[1])                                for i in range(self.listWidget_2.count()):                                        ply=self.listWidget_2.item(i).text()                                        sql="SELECT ctg from stats WHERE player=='"+ply+"';"                    cur=con.execute(sql)                    row=cur.fetchall()                    for r in row:                        ctgr=r[0]                        if ctgr=="BAT":                            self.bat+=1                                                if ctgr=="BWL":                            self.bwl+=1                        if ctgr=="AR":                            self.ar+=1                                                if ctgr=="WK":                            self.wk+=1                    self.show()                                            if t=='Save Team':                        ply=""            for i in range(self.listWidget_2.count()):                ply+=self.listWidget_2.item(i).text()                ply+=","            nm=self.t7.text()            val=self.used            import sqlite3            con=sqlite3.connect('cricket.db')            cur=con.cursor()            sql="INSERT INTO teams (name,players,value) VALUES ('"+nm+"','"+ply+"','"+str(val)+"');"            cur=con.execute(sql)            Dialog=QtWidgets.QMessageBox()            Dialog.setText("Team Saved Successfully......")            Dialog.setWindowTitle("Dream Team selector")            ret=Dialog.exec()            con.commit()        if t=='Evaluate Team':            from dlg import Ui_Dialog            Dialog = QtWidgets.QDialog()            ui = Ui_Dialog()            ui.setupUi(Dialog)            ret=Dialog.exec()        if t=='Exit':            Dialog=QtWidgets.QMessageBox()            Dialog.setText("Thank You for using this application........")            Dialog.setWindowTitle("Exit")            ret=Dialog.exec()            sys.exit(1)        def button(self):        import sqlite3        con=sqlite3.connect('cricket.db')        cur1=con.cursor()        if self.b1.isChecked()==True:                        s1="SELECT player from stats WHERE ctg=='BAT';"            cur1.execute(s1)            result=cur1.fetchall()            self.listWidget.clear()            for r1 in result:                                self.listWidget.addItem("{}".format(r1[0]))        elif self.b2.isChecked()==True:                        s2="SELECT player from stats WHERE ctg=='BWL';"            cur1.execute(s2)            result=cur1.fetchall()            self.listWidget.clear()            for r2 in result:                                self.listWidget.addItem("{}".format(r2[0]))                        elif self.b3.isChecked()==True:                        s3="SELECT player from stats WHERE ctg=='AR';"            cur1.execute(s3)            result=cur1.fetchall()            self.listWidget.clear()            for r3 in result:                self.listWidget.addItem("{}".format(r3[0]))                                                                                                elif self.b4.isChecked()==True:                                                    s4="SELECT player from stats WHERE ctg=='WK';"            cur1.execute(s4)            result=cur1.fetchall()            self.listWidget.clear()            for r4 in result:                self.listWidget.addItem("{}".format(r4[0]))    def removelist1(self, item):        ite=self.listWidget.takeItem(self.listWidget.row(item))        self.listWidget_2.addItem(item.text())                import sqlite3        conn=sqlite3.connect('cricket.db')        cur=conn.cursor()        sql="SELECT value,ctg from stats where player='"+item.text()+"'"        cur=conn.execute(sql)        row=cur.fetchone()        self.avl-=int(row[0])        self.used+=int(row[0])        ctgr=row[1]        if ctgr=="BAT":            self.bat+=1        if ctgr=="BWL":            self.bwl+=1        if ctgr=="AR":            self.ar+=1        if ctgr=="WK":            self.wk+=1        self.error()        self.show()            def removelist2(self, item):        self.listWidget_2.takeItem(self.listWidget_2.row(item))        import sqlite3        conn=sqlite3.connect('cricket.db')        cur=conn.cursor()        sql="SELECT player,value, ctg from stats where player='"+item.text()+"'"        cur=conn.execute(sql)        row=cur.fetchone()        self.avl=self.avl+int(row[1])        self.used=self.used-int(row[1])        ctgr=row[2]        if ctgr=="BAT":            self.bat-=1            if self.b1.isChecked()==True:                self.listWidget.addItem(item.text())        if ctgr=="BWL":            self.bwl-=1            if self.b2.isChecked()==True:                self.listWidget.addItem(item.text())        if ctgr=="AR":            self.ar-=1            if self.b3.isChecked()==True:                self.listWidget.addItem(item.text())        if ctgr=="WK":            self.wk-=1            if self.b4.isChecked()==True:                self.listWidget.addItem(item.text())        self.show()    def error(self):        error_dialog=QtWidgets.QErrorMessage()        if self.bat>=0 and self.bat<6:            pass        else:            error_dialog.showMessage("Only 5 batsman are allowed")            error_dialog.exec_()        if self.bwl>=0 and self.bwl<6:            pass        else:            error_dialog.showMessage("bowlers not more than 5")            error_dialog.exec_()        if self.ar>=0 and self.ar<4:            pass        else:            error_dialog.showMessage("Allrounders not more than 3")            error_dialog.exec_()        if self.wk>=0 and self.wk<2:            pass        else:            error_dialog.showMessage("Wicketkeepers not more than 1")            error_dialog.exec_()        if self.bat+self.bwl+self.ar+self.wk!=12:               pass        else:            error_dialog.showMessage("Insufficient players")            error_dialog.exec_()                           if __name__ == "__main__":    import sys    app = QtWidgets.QApplication(sys.argv)    MainWindow = QtWidgets.QMainWindow()    ui = Ui_MainWindow()    ui.setupUi(MainWindow)    MainWindow.show()        sys.exit(app.exec_())